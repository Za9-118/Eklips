from classes import Singleton as engine
import json, os
import tkinter as tk
from tkinter import ttk

def get_curr_project_data():
    gamejsloc = engine.project_info[4]
    gamejs    = json.loads(open(gamejsloc).read())
    title     = gamejs["game_name"]
    ver       = gamejs["project-ver"]
    eklver    = gamejs["eklips-ver"]
    path      = engine.project_info[3]
    return path,title,ver,eklver,gamejs, engine.project_id, gamejsloc

def _clicked(self):
    _invoke_menu(self)

def __chng(self, pth,info,rat):
    engine.printf("Change project dir")
    info    = list(info)
    path    = pth.get()

    if not os.path.isdir(path):
        return engine.showerror("Eklips Editor", "Directory must exist")
    if not os.path.isfile(f"{path}/game.json"):
        return engine.showerror("Eklips Editor", "Directory must have a game.json")
    
    rat.destroy()
    info[0] = path
    gid     = info[5]
    
    prjs         = engine.savefile.get("projects")
    prjs[gid][3] = path
    prjs[gid][4] = f"{path}/game.json"
    workflow     = engine.scene.get_node_from_path("", "Back")
    workflow     : engine.Scene.Node

    gjs                                    = info[4]
    gjs["cvars"]["icon_file"]["directory"] = "point::UseGameJsonParent"

    with open(info[6],"w") as f:
        f.write(json.dumps(gjs,indent=4))

    engine.savefile.set("projects", engine.savefile.get("projects"))

    workflow.call("init")

def _change_dir(self, root, info):
    rat = tk.Toplevel(root)
    rat.title(f"Change directory for {info[1]}")
    rat.geometry("260x100")
    rat.resizable(False, False)

    pth = tk.StringVar()
    pth.set(info[0])

    lbln = ttk.Label(rat, text="Project directory:")
    lbln.place(x=5,y=5)
    lbln = ttk.Entry(rat, textvariable=pth)
    lbln.place(x=105,y=5)
    
    lbln = ttk.Button(rat, text="Apply", command=lambda: __chng(self, pth, info, rat))
    lbln.place(x=105,y=35)

def _apply_meta(self, nm, vr, ip, tp, con, info, root):
    engine.printf("Applying project meta")
    info    = list(info)
    name    = nm.get()
    ver     = vr.get()
    icon    = ip.get()
    theme   = tp.get()
    console = con.get()

    info[1] = name
    info[2] = ver
    gjs     = info[4]
    gid     = info[5]
    
    prjs         = engine.savefile.get("projects")
    prjs[gid][0] = name                           
    prjs[gid][1] = ver                            

    workflow     = engine.scene.get_node_from_path("", "Back")
    workflow     : engine.Scene.Node                          

    gjs["game_name"]   = name
    gjs["project-ver"] = ver 
    
    gjs["cvars"]["icon_file"]["default"]  = icon   
    gjs["cvars"]["theme_file"]["default"] = theme  
    gjs["cvars"]["con"]["default"]        = console

    with open(info[6],"w") as f:
        f.write(json.dumps(gjs,indent=4))

    engine.savefile.set("projects", engine.savefile.get("projects"))

    workflow.call("init")
    root.destroy()

def _invoke_menu(self):
    engine.printf("Show menu")
    info = get_curr_project_data()
    root = tk.Tk()
    root.title(f"Settings for {info[1]}")
    root.geometry("500x500")
    cvars = info[4]["cvars"]
    keys  = info[4]["keys"]

    # Meta
    tabs = ttk.Notebook(root)
    tab1 = ttk.Frame(tabs)
    nm   = tk.StringVar(value=info[4]["game_name"])
    vr   = tk.StringVar(value=info[4]["project-ver"])
    ip   = tk.StringVar(value=cvars["icon_file"]["default"])
    tp   = tk.StringVar(value=cvars["theme_file"]["default"])
    con  = tk.BooleanVar(value=cvars["con"]["default"])
    lbln = ttk.Label(tab1, text="Project name:")
    lbln.place(x=5,y=5)
    lbln = ttk.Entry(tab1, textvariable=nm)
    lbln.place(x=105,y=5)
    lbln = ttk.Label(tab1, text="Project version:")
    lbln.place(x=5,y=27)
    lbln = ttk.Entry(tab1, textvariable=vr)
    lbln.place(x=105,y=27)
    lbln = ttk.Label(tab1, text="Icon path:")
    lbln.place(x=5,y=49)
    lbln = ttk.Entry(tab1, textvariable=ip)
    lbln.place(x=105,y=49)
    lbln = ttk.Label(tab1, text="Theme path:")
    lbln.place(x=5,y=71)
    lbln = ttk.Entry(tab1, textvariable=tp)
    lbln.place(x=105,y=71)
    lbln = ttk.Label(tab1, text="Console?:")
    lbln.place(x=5,y=93)
    lbln = ttk.Checkbutton(tab1, variable=con)
    lbln.place(x=105,y=93)
    lbln = ttk.Label(tab1, text="You cannot change the name of your\nproject directory by using Explorer!\nPlease, change it using this button;")
    lbln.place(x=5,rely=1, y=-55)
    lblb = ttk.Button(tab1, text="Change directory name", command=lambda: _change_dir(self, root, info))
    lblb.place(relx=1,rely=1, x=-225, y=-35)
    lblb = ttk.Button(tab1, text="Apply", command=lambda:_apply_meta(self, nm,vr,ip,tp,con, info, root))
    lblb.place(relx=1,rely=1, x=-85, y=-35)

    # CVars
    tab2 = ttk.Frame(tabs)
    cvtr = ttk.Treeview(tab2, columns=("Value", "Comment"))
    cvtr.column("Value")
    cvtr.heading("Value", text="Value")
    cvtr.column("Comment")
    cvtr.heading("Comment", text="Comment")
    cvtr.pack(expand=1, fill="both")

    for i in cvars:
        cvar = cvars[i]
        id   = f"sv_{i}"
        cvtr.insert("", "end", id, text=i)
        cvtr.set(id, "Value", cvar["default"])
        cvtr.set(id, "Comment", cvar.get("description", "N/A"))

    # Keys
    tab3 = ttk.Frame(tabs)
    kytr = ttk.Treeview(tab3, columns=("Keybinds", "Holdable"))
    kytr.column("Keybinds")
    kytr.heading("Keybinds", text="Keybinds")
    kytr.column("Holdable",  width=35)
    kytr.heading("Holdable", text="Holdable")

    kytr.pack(expand=1, fill="both")

    for i in keys:
        key = keys[i]
        id   = f"ky_{i}"
        kytr.insert("", "end", id, text=i)
        kytr.set(id, "Keybinds", key["keys"])
        kytr.set(id, "Holdable", engine.boollike_to_word(key["holdable"]))

    # CMD
    tab4 = ttk.Frame(tabs)


    # Add them
    tabs.add(tab1, text="Project metadata")
    tabs.add(tab2, text="CVars")
    tabs.add(tab3, text="Keybinds")
    tabs.add(tab4, text="Commands")
    tabs.pack(expand=1, fill='both')

    root.mainloop()